name: iOS Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 手動トリガーも設定

jobs:
  build:
    name: Build and Deploy iOS App
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.x'
          
      - name: Install dependencies
        run: |
          gem install bundler
          bundle install
          
      - name: Install Apple Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # 証明書の作成
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # 証明書のデコード
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          
          # 一時的なキーチェーンの作成
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # キーチェーンに証明書をインポート
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
      - name: Prepare Xcode Project
        run: |
          # Xcodeプロジェクトを作成 (ディレクトリ構造の確認と調整が必要)
          mkdir -p SOAPJournal.xcodeproj
          
          # Swiftファイルとリソースをコピー
          cp -R SOAPJournal/* ./
          
          # 必要に応じてプロジェクト設定を構成
          
      - name: Setup Provisioning Profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          # プロビジョニングプロファイルのデコードと配置
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode --output $PROFILE_PATH
          
      - name: Build Xcode Project
        env:
          DEVELOPER_APP_ID: ${{ secrets.DEVELOPER_APP_ID }}
          DEVELOPER_APP_IDENTIFIER: ${{ secrets.DEVELOPER_APP_IDENTIFIER }}
          PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Xcodeビルド
          xcodebuild -scheme SOAPJournal \
            -workspace SOAPJournal.xcworkspace \
            -configuration Release \
            -archivePath $RUNNER_TEMP/SOAPJournal.xcarchive \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -allowProvisioningUpdates \
            DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
            PROVISIONING_PROFILE_SPECIFIER=$PROVISIONING_PROFILE_SPECIFIER \
            PRODUCT_BUNDLE_IDENTIFIER=$DEVELOPER_APP_IDENTIFIER \
            archive
            
      - name: Create IPA File
        run: |
          # アーカイブからipaを作成
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/SOAPJournal.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath $RUNNER_TEMP/build
            
      - name: Upload IPA to TestFlight
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_KEY_CONTENT: ${{ secrets.APPLE_API_KEY_CONTENT }}
        run: |
          # App Store Connectに認証する
          echo -n "$APPLE_API_KEY_CONTENT" | base64 --decode --output $RUNNER_TEMP/api_key.p8
          
          # App Store Connectにアップロード
          xcrun altool --upload-app \
            --type ios \
            --file $RUNNER_TEMP/build/SOAPJournal.ipa \
            --apiKey $APPLE_API_KEY_ID \
            --apiIssuer $APPLE_API_ISSUER_ID \
            --verbose