default_platform(:ios)

platform :ios do
  # エラーハンドリングの設定
  error do |lane, exception|
    UI.error("#{lane}レーン実行中にエラーが発生しました: #{exception}")
    
    # エラーの詳細情報を取得して表示
    if exception.backtrace
      UI.error("バックトレース:")
      exception.backtrace.each_with_index do |line, index|
        UI.error("  #{index}: #{line}") if index < 10  # 最初の10行だけ表示
      end
    end
    
    # 一般的なエラーに対するアドバイスを表示
    case exception.message
    when /provisioning profile/i
      UI.error("プロビジョニングプロファイルに関する問題が発生しました。以下を確認してください:")
      UI.error("- バンドルIDが正しく、Apple Developer Portalに登録されているか")
      UI.error("- App Store用のプロビジョニングプロファイルが作成されているか")
      UI.error("- APIキーに適切な権限があるか (App Manager以上が必要)")
    when /api key/i
      UI.error("App Store Connect APIキーに関する問題が発生しました。以下を確認してください:")
      UI.error("- APIキーのID、発行者ID、コンテンツが正しく設定されているか")
      UI.error("- APIキーが有効で、適切な権限を持っているか")
    when /authentication/i
      UI.error("認証に失敗しました。以下を確認してください:")
      UI.error("- App Store Connect APIキーが正しく設定されているか")
      UI.error("- Apple IDとパスワードが正しく設定されているか（APIキーが機能しない場合）")
    when /code signing/i
      UI.error("コード署名に関する問題が発生しました。以下を確認してください:")
      UI.error("- チームIDが正しく設定されているか")
      UI.error("- 適切な署名証明書がキーチェーンにインストールされているか")
    when /build number/i
      UI.error("ビルド番号に関する問題が発生しました。以下を試してください:")
      UI.error("- 手動でビルド番号を指定する (increment_build_number(build_number: 1))")
      UI.error("- App Store Connectにアプリが登録されていることを確認する")
    end
  end

  # 依存関係のインストール用のレーン
  desc "Install dependencies"
  lane :install_dependencies do
    # 必要な依存関係があればインストールする処理
  end

  # App Store Connect API認証と情報の取得
  desc "Setup App Store Connect API and get app details"
  lane :setup_api_and_get_details do
    UI.important("App Store Connect APIキーを使用して情報を取得しています...")
    
    begin
      # App Store Connect APIキーの設定 - これにより多くの情報が自動取得可能になる
      api_key = app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
        key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"],
        in_house: false, # Enterpriseアカウントの場合はtrueに設定
        duration: 1200, # トークンの有効期限（秒）
        is_key_content_base64: false
      )

      UI.success("✅ App Store Connect APIキーの設定に成功しました")
    rescue => ex
      UI.error("❌ App Store Connect APIキーの設定に失敗しました: #{ex.message}")
      if ENV["APPLE_ID"] && ENV["APPLE_PASSWORD"]
        UI.important("Apple IDとパスワードを使用して認証を試みます...")
      else
        UI.error("APIキーが機能しない場合は、APPLE_IDとAPPLE_PASSWORDを設定してください")
      end
      raise ex unless ENV["APPLE_ID"] # Apple IDが設定されていなければエラー終了
    end

    # バンドルIDを取得する
    begin
      # 環境変数にバンドルIDが設定されているか確認
      if ENV["BUNDLE_IDENTIFIER"] && !ENV["BUNDLE_IDENTIFIER"].empty?
        bundle_id = ENV["BUNDLE_IDENTIFIER"]
        UI.success("環境変数から取得したバンドルID: #{bundle_id}")
      else
        # Info.plistからバンドルIDを取得
        info_plist_path = Dir.glob("./**/Info.plist").first
        
        if info_plist_path
          UI.success("Info.plistが見つかりました: #{info_plist_path}")
          bundle_id = get_info_plist_value(path: info_plist_path, key: "CFBundleIdentifier")
          
          if bundle_id && !bundle_id.empty?
            ENV["BUNDLE_IDENTIFIER"] = bundle_id
            UI.success("Info.plistから取得したバンドルID: #{bundle_id}")
          else
            # デフォルトのバンドルIDを使用
            bundle_id = "com.yourcompany.SOAPJournal"
            ENV["BUNDLE_IDENTIFIER"] = bundle_id
            UI.important("Info.plistからバンドルIDを取得できませんでした。デフォルト値を使用します: #{bundle_id}")
          end
        else
          # Info.plistが見つからない場合はデフォルト値を使用
          bundle_id = "com.yourcompany.SOAPJournal"
          ENV["BUNDLE_IDENTIFIER"] = bundle_id
          UI.important("Info.plistが見つかりませんでした。デフォルト値を使用します: #{bundle_id}")
        end
      end
    rescue => ex
      UI.error("バンドルIDの取得中にエラーが発生しました: #{ex.message}")
      bundle_id = "com.yourcompany.SOAPJournal"
      ENV["BUNDLE_IDENTIFIER"] = bundle_id
      UI.important("エラーが発生したため、デフォルト値を使用します: #{bundle_id}")
    end

    # チームIDを自動取得（Apple Developer Portalから）- APIキーに関連付けられたチーム
    begin
      if ENV["TEAM_ID"] && !ENV["TEAM_ID"].empty?
        UI.success("環境変数から取得したチームID: #{ENV["TEAM_ID"]}")
      else
        UI.important("APIからチームIDを取得しています...")
        team_id = Spaceship::ConnectAPI::Team.all.first.id
        ENV["TEAM_ID"] = team_id
        UI.success("APIから取得したチームID: #{team_id}")
      end
    rescue => ex
      UI.error("チームIDの自動取得に失敗しました: #{ex.message}")
      UI.error("TEAM_ID環境変数を手動で設定してください")
    end

    # アプリIDを自動取得（App名またはバンドルIDから）
    begin
      if ENV["APPLE_APP_ID"] && !ENV["APPLE_APP_ID"].empty?
        UI.success("環境変数から取得したアプリID: #{ENV["APPLE_APP_ID"]}")
      else
        UI.important("バンドルID [#{bundle_id}] からアプリIDを検索中...")
        app = Spaceship::ConnectAPI::App.find(bundle_id)
        if app
          ENV["APPLE_APP_ID"] = app.id
          UI.success("APIから取得したアプリID: #{app.id} (アプリ名: #{app.name})")
        else
          UI.error("バンドルID [#{bundle_id}] に一致するアプリが見つかりませんでした")
          UI.error("APPLE_APP_ID環境変数を手動で設定するか、App Store Connectでアプリを登録してください")
        end
      end
    rescue => ex
      UI.error("アプリIDの検索中にエラーが発生しました: #{ex.message}")
      UI.error("APPLE_APP_ID環境変数を手動で設定してください")
    end
  end

  # ビルドとアーカイブ用のレーン
  desc "Build and archive the app"
  lane :build_and_archive do
    UI.important("ビルドとアーカイブを開始します...")
    
    # APIキーの設定と情報の取得
    setup_api_and_get_details

    # プロビジョニングプロファイルを自動取得
    begin
      UI.important("プロビジョニングプロファイルを取得中...")
      
      # 環境変数にプロファイル名が設定されているか確認
      if ENV["PROVISIONING_PROFILE_NAME"] && !ENV["PROVISIONING_PROFILE_NAME"].empty?
        UI.success("環境変数から取得したプロビジョニングプロファイル名: #{ENV["PROVISIONING_PROFILE_NAME"]}")
      else
        # 自動でプロビジョニングプロファイルを取得
        sigh(
          api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
          app_identifier: ENV["BUNDLE_IDENTIFIER"],
          readonly: false,
          team_id: ENV["TEAM_ID"]
        )
        UI.success("プロビジョニングプロファイルの取得に成功しました: #{lane_context[SharedValues::SIGH_NAME]}")
      end
    rescue => ex
      UI.error("プロビジョニングプロファイルの取得に失敗しました: #{ex.message}")
      UI.error("PROVISIONING_PROFILE_NAME環境変数を手動で設定してください")
      # エラーをスローせずに続行（後の処理でデフォルト値または環境変数の値を使用）
    end

    # ビルド設定の更新
    begin
      UI.important("ビルド設定を更新中...")
      
      profile_name = ENV["PROVISIONING_PROFILE_NAME"]
      profile_name ||= lane_context[SharedValues::SIGH_NAME] if lane_context[SharedValues::SIGH_NAME]
      
      if profile_name
        UI.success("使用するプロビジョニングプロファイル: #{profile_name}")
        update_code_signing_settings(
          use_automatic_signing: false,
          path: Dir.glob("./**/*.xcodeproj").first || "SOAPJournal.xcodeproj",
          team_id: ENV["TEAM_ID"],
          code_sign_identity: "iPhone Distribution",
          profile_name: profile_name,
          bundle_identifier: ENV["BUNDLE_IDENTIFIER"]
        )
        UI.success("コード署名設定の更新に成功しました")
      else
        UI.important("プロビジョニングプロファイルが指定されていないため、自動署名を使用します")
        update_code_signing_settings(
          use_automatic_signing: true,
          path: Dir.glob("./**/*.xcodeproj").first || "SOAPJournal.xcodeproj",
          team_id: ENV["TEAM_ID"],
          bundle_identifier: ENV["BUNDLE_IDENTIFIER"]
        )
      end
    rescue => ex
      UI.error("コード署名設定の更新に失敗しました: #{ex.message}")
      UI.important("ビルド時に自動署名を試みます")
    end

    # バージョン番号とビルド番号を自動インクリメント
    begin
      UI.important("ビルド番号を更新中...")
      
      current_build_number = 0
      begin
        # TestFlightの最新ビルド番号を取得
        current_build_number = latest_testflight_build_number(
          api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
          app_identifier: ENV["BUNDLE_IDENTIFIER"],
          version: get_version_number
        )
        UI.success("現在のTestFlightビルド番号: #{current_build_number}")
      rescue => ex
        UI.error("TestFlightからビルド番号を取得できませんでした: #{ex.message}")
        UI.important("ビルド番号1から開始します")
      end
      
      # ビルド番号をインクリメント
      new_build_number = current_build_number + 1
      increment_build_number(build_number: new_build_number)
      UI.success("ビルド番号を#{new_build_number}に更新しました")
    rescue => ex
      UI.error("ビルド番号の更新に失敗しました: #{ex.message}")
      UI.important("既存のビルド番号を使用します")
    end

    # iOSアプリをビルドしてアーカイブ
    UI.important("アプリをビルドしてアーカイブしています...")
    begin
      # プロジェクトのスキーム名を取得（または推測）
      scheme = ENV["SCHEME"]
      unless scheme
        # プロジェクト内のスキーム一覧を取得
        schemes = sh("xcodebuild -list -json 2>/dev/null || echo '{\"project\":{\"schemes\":[]}}' | ruby -e 'require \"json\"; puts JSON.parse(STDIN.read)[\"project\"][\"schemes\"].join(\",\")'")
        schemes = schemes.strip.split(",")
        
        if schemes.length > 0
          scheme = schemes.first
          UI.success("自動検出されたスキーム: #{scheme}")
        else
          scheme = "SOAPJournal"
          UI.important("スキームを自動検出できませんでした。デフォルト値を使用します: #{scheme}")
        end
      end
      
      # ビルドオプションを設定
      build_app_options = {
        scheme: scheme,
        export_method: "app-store",
        output_directory: "./build",
        archive_path: "./build/SOAPJournal.xcarchive",
        clean: true,
        xcargs: "-allowProvisioningUpdates"
      }
      
      # TeamIDが設定されている場合は追加
      build_app_options[:export_team_id] = ENV["TEAM_ID"] if ENV["TEAM_ID"] && !ENV["TEAM_ID"].empty?
      
      # プロビジョニングプロファイルが設定されている場合は追加
      if ENV["PROVISIONING_PROFILE_NAME"] && !ENV["PROVISIONING_PROFILE_NAME"].empty?
        build_app_options[:export_options] = {
          provisioningProfiles: {
            ENV["BUNDLE_IDENTIFIER"] => ENV["PROVISIONING_PROFILE_NAME"]
          }
        }
      end
      
      # アプリをビルド
      build_app(build_app_options)
      UI.success("アプリのビルドとアーカイブに成功しました")
    rescue => ex
      UI.error("アプリのビルドに失敗しました: #{ex.message}")
      raise ex
    end
  end

  # TestFlightへのアップロード用のレーン
  desc "Upload to TestFlight"
  lane :beta do
    UI.important("TestFlightへのデプロイを開始します...")
    
    begin
      # アプリをビルドしてアーカイブ（APIキー設定も含む）
      build_and_archive
      
      UI.important("TestFlightにアップロード中...")
      
      # アップロードオプションを設定
      upload_options = {
        api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
        skip_waiting_for_build_processing: true,
        app_identifier: ENV["BUNDLE_IDENTIFIER"],
        distribute_external: true,
        notify_external_testers: true,
        changelog: "最新のテストビルド - #{Time.now.strftime('%Y/%m/%d %H:%M')}"
      }
      
      # Apple App IDが設定されている場合は追加
      upload_options[:apple_id] = ENV["APPLE_APP_ID"] if ENV["APPLE_APP_ID"] && !ENV["APPLE_APP_ID"].empty?
      
      # TestFlightにアップロード
      upload_to_testflight(upload_options)
      UI.success("✅ TestFlightへのアップロードに成功しました！")
    rescue => ex
      UI.error("❌ TestFlightへのアップロードに失敗しました: #{ex.message}")
      raise ex
    end
  end
  
  # デバッグ情報表示用のレーン
  desc "Show debug info"
  lane :debug_info do
    UI.important("デバッグ情報:")
    UI.message("BUNDLE_IDENTIFIER: #{ENV['BUNDLE_IDENTIFIER']}")
    UI.message("TEAM_ID: #{ENV['TEAM_ID']}")
    UI.message("APPLE_APP_ID: #{ENV['APPLE_APP_ID']}")
    UI.message("PROVISIONING_PROFILE_NAME: #{ENV['PROVISIONING_PROFILE_NAME']}")
    
    UI.important("ファイルシステム情報:")
    sh("find . -name '*.xcodeproj' | sort")
    sh("find . -name 'Info.plist' | sort")
    
    UI.important("Xcodeプロジェクト情報:")
    begin
      project_path = Dir.glob("./**/*.xcodeproj").first
      if project_path
        sh("xcodebuild -list -json -project #{project_path} 2>/dev/null || echo '{\"project\":{\"schemes\":[]}}'")
      else
        UI.error("Xcodeプロジェクトが見つかりませんでした")
      end
    rescue => ex
      UI.error("Xcodeプロジェクト情報の取得に失敗しました: #{ex.message}")
    end
  end
end
